<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.yugong.auth.dao.generate.UserMapper">
  <resultMap id="BaseResultMap" type="org.yugong.auth.entity.generate.User">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="app_id" jdbcType="INTEGER" property="appId" />
    <result column="user_account" jdbcType="VARCHAR" property="userAccount" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `user_id`, `app_id`, `user_account`, `password`, `user_name`, `create_time`, `update_time`
  </sql>
  <select id="selectByExample" parameterType="org.yugong.auth.entity.generate.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `sec_user`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="offset != null and limit != null">
      limit ${offset}, ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `sec_user`
    where `user_id` = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `sec_user`
    where `user_id` = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.yugong.auth.entity.generate.UserExample">
    delete from `sec_user`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.yugong.auth.entity.generate.User">
    <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `sec_user` (`app_id`, `user_account`, `password`, 
      `user_name`)
    values (#{appId,jdbcType=INTEGER}, #{userAccount,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{userName,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.yugong.auth.entity.generate.User">
    <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `sec_user`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="appId != null">
        `app_id`,
      </if>
      <if test="userAccount != null">
        `user_account`,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="userName != null">
        `user_name`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="appId != null">
        #{appId,jdbcType=INTEGER},
      </if>
      <if test="userAccount != null">
        #{userAccount,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.yugong.auth.entity.generate.UserExample" resultType="java.lang.Long">
    select count(*) from `sec_user`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update `sec_user`
    <set>
      <if test="record.appId != null">
        `app_id` = #{record.appId,jdbcType=INTEGER},
      </if>
      <if test="record.userAccount != null">
        `user_account` = #{record.userAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        `password` = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.userName != null">
        `user_name` = #{record.userName,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `sec_user`
    set `app_id` = #{record.appId,jdbcType=INTEGER},
      `user_account` = #{record.userAccount,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=VARCHAR},
      `user_name` = #{record.userName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.yugong.auth.entity.generate.User">
    update `sec_user`
    <set>
      <if test="appId != null">
        `app_id` = #{appId,jdbcType=INTEGER},
      </if>
      <if test="userAccount != null">
        `user_account` = #{userAccount,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        `user_name` = #{userName,jdbcType=VARCHAR},
      </if>
    </set>
    where `user_id` = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.yugong.auth.entity.generate.User">
    update `sec_user`
    set `app_id` = #{appId,jdbcType=INTEGER},
      `user_account` = #{userAccount,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      `user_name` = #{userName,jdbcType=VARCHAR}
    where `user_id` = #{userId,jdbcType=INTEGER}
  </update>
</mapper>